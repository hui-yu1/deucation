# Generated by Django 2.2.16 on 2020-11-12 13:24

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cla_major', models.IntegerField(choices=[(0, '人工智能'), (1, '全栈工程师'), (2, '大数据')], default=0, verbose_name='专业')),
                ('cla_name', models.CharField(max_length=20, verbose_name='班级名称')),
                ('cla_number', models.IntegerField(verbose_name='班级人数')),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tea_name', models.CharField(max_length=10, verbose_name='教师姓名')),
                ('tea_phone', models.CharField(max_length=11, verbose_name='教师电话')),
                ('tea_email', models.CharField(max_length=50, verbose_name='教师邮箱')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stu_id', models.CharField(max_length=30, verbose_name='学号')),
                ('stu_name', models.CharField(max_length=10, verbose_name='学生姓名')),
                ('stu_age', models.IntegerField(verbose_name='学生年龄')),
                ('stu_gender', models.IntegerField(choices=[(0, '男'), (1, '女')], verbose_name='学生性别')),
                ('stu_address', models.CharField(max_length=100, verbose_name='籍贯')),
                ('stu_time', models.DateField(verbose_name='入校时间')),
                ('stu_major', models.IntegerField(choices=[(0, '人工智能'), (1, '全栈工程师'), (2, '大数据')], default=0, verbose_name='专业')),
                ('stu_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.StudentClass', verbose_name='所在班级')),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cou_name', models.CharField(max_length=50, verbose_name='课程名')),
                ('cou_desc', models.CharField(max_length=300, verbose_name='课程描述')),
                ('cou_number', models.IntegerField(verbose_name='课程人数')),
                ('cou_times', models.CharField(max_length=50, verbose_name='课程时段')),
                ('cou_duration', models.IntegerField(default=0, verbose_name='课程时长')),
                ('cou_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.StudentClass', verbose_name='讲课班级')),
                ('cou_teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.Teacher', verbose_name='讲课教师')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=11, verbose_name='手机号')),
                ('created_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='创建日期')),
                ('modified_date', models.DateTimeField(default=datetime.datetime.now, verbose_name='修改日期')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
